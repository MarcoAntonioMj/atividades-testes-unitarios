## Exercício de Cálculo de Média
#### Passo a Passo
- Crie um novo projeto Java em seu ambiente de desenvolvimento integrado (IDE) de sua escolha.
- Crie uma classe principal chamada "App".
- Crie uma classe "Calculo" para encapsular o cálculo de média.
- Defina as variáveis numero1 e numero2 como private na classe "Calculo".
- Crie métodos getter e setter para as variáveis numero1 e numero2.
- Crie um construtor na classe "Calculo" que receba dois parâmetros: numero1 e numero2.
- Implemente o método media na classe "Calculo" que calcula a média entre numero1 e numero2.
- Na classe "App", instancie um objeto da classe "Calculo", passando os dois números inseridos pelo usuário como parâmetros.
- Chame o método media na instância de "Calculo" criada e imprima o resultado na tela.
### Primeito teste 
1. Crie uma classe de teste Java 
2. Importe as classes "Calculo", "Test" e "Assertions" usando a seguinte sintaxe:
```
package com.marco.myproject;
import com.marco.myproject.Calculo.Calculo;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

```
3. Instancie um objeto da classe "Calculo", passando dois números inteiros positivos como parâmetros.
4. Defina uma variável expectedMedia com o valor esperado da média dos dois números passados
5. Chame o método media() compare o resultado com expectedMedia usando o método assertEquals() de Assertions..

### Segundo teste 
Na segunda função de teste, que chamamos de testMediaInteirosNegativo(), eu quis verificar se a classe Calculo consegue lidar corretamente com números negativos. Para isso, eu criei um objeto da classe Calculo passando como argumentos dois números negativos (-5 e -5), que devem resultar em uma média negativa.

Em seguida, eu defini o resultado esperado como -5.0 e usei o método Assertions.assertEquals() para comparar esse resultado com o resultado real da chamada do método media() da classe Calculo.

Com isso, eu consegui testar se a classe Calculo está funcionando corretamente em um cenário específico de números negativos, e assim garantir que o código esteja mais robusto.
### Terceiro teste 

